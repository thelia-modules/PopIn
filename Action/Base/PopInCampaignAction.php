<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace PopIn\Action\Base;

use PopIn\Model\Map\PopInCampaignTableMap;
use PopIn\Event\PopInCampaignEvent;
use PopIn\Event\PopInCampaignEvents;
use PopIn\Model\PopInCampaignQuery;
use PopIn\Model\PopInCampaign;
use PopIn\Model\PopInFreeContent;
use PopIn\Model\PopInFreeContentQuery;
use Thelia\Action\BaseAction;
use Propel\Runtime\Propel;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Thelia\Core\Event\TheliaEvents;
use \Thelia\Core\Event\TheliaFormEvent;

/**
 * Class PopInCampaignAction
 * @package PopIn\Action
 * @author TheliaStudio
 */
class PopInCampaignAction extends BaseAction implements EventSubscriberInterface
{
    /**
     * @param PopInCampaignEvent $event
     * @throws \Exception
     */
    public function create(PopInCampaignEvent $event)
    {
        $this->createOrUpdate($event, new PopInCampaign());
    }

    /**
     * @param PopInCampaignEvent $event
     * @throws \Exception
     */
    public function update(PopInCampaignEvent $event)
    {
        $model = $this->getPopInCampaign($event);

        $this->createOrUpdate($event, $model);
    }

    /**
     * @param PopInCampaignEvent $event
     * @throws \Propel\Runtime\Exception\PropelException
     */
    public function delete(PopInCampaignEvent $event)
    {
        /** @var PopInFreeContent $popinFreeContent */
        $popinFreeContent = PopInFreeContentQuery::create()
            ->filterByIdPopInCampaign($event->getId())
            ->findOne();

        if(null !== $popinFreeContent){
            $popinFreeContent
                ->delete();
        }

        $this->getPopInCampaign($event)->delete();
    }

    /**
     * @param PopInCampaignEvent $event
     * @param PopInCampaign $model
     * @throws \Exception
     */
    protected function createOrUpdate(PopInCampaignEvent $event, PopInCampaign $model)
    {
        $con = Propel::getConnection(PopInCampaignTableMap::DATABASE_NAME);
        $con->beginTransaction();

        try {
            if (null !== $id = $event->getId()) {
                $model->setId($id);
            }

            if (null !== $start = $event->getStart()) {
                $model->setStart($start);
            }

            if (null !== $end = $event->getEnd()) {
                $model->setEnd($end);
            }

            if (null !== $contentSourceType = $event->getContentSourceType()) {
                $model->setContentSourceType($contentSourceType);
            }

            if (null !== $contentSourceId = $event->getContentSourceId()) {
                $model->setContentSourceId($contentSourceId);
            }

            $model->save($con);

            $con->commit();


            if('free-content' == $contentSourceType){
                if ((null !== $textFree = $event->getTextFree()) && (null !== $link = $event->getLink())) {

                    /** @var PopInFreeContent $popinFreeContent */
                    $popinFreeContent = PopInFreeContentQuery::create()
                        ->filterByIdPopInCampaign($model->getId())
                        ->findOneOrCreate();

                    $popinFreeContent
                        ->setTextFree($textFree)
                        ->setLink($link)
                        ->save();
                }
            }

        } catch (\Exception $e) {
            $con->rollback();

            throw $e;
        }

        $event->setPopInCampaign($model);
    }

    protected function getPopInCampaign(PopInCampaignEvent $event)
    {
        $model = PopInCampaignQuery::create()->findPk($event->getId());

        if (null === $model) {
            throw new \RuntimeException(sprintf(
                "The 'pop_in_campaign' id '%d' doesn't exist",
                $event->getId()
            ));
        }

        return $model;
    }

    public function beforeCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function beforeUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    /**
     * Returns an array of event names this subscriber wants to listen to.
     *
     * The array keys are event names and the value can be:
     *
     *  * The method name to call (priority defaults to 0)
     *  * An array composed of the method name to call and the priority
     *  * An array of arrays composed of the method names to call and respective
     *    priorities, or 0 if unset
     *
     * For instance:
     *
     *  * array('eventName' => 'methodName')
     *  * array('eventName' => array('methodName', $priority))
     *  * array('eventName' => array(array('methodName1', $priority), array('methodName2'))
     *
     * @return array The event names to listen to
     *
     * @api
     */
    public static function getSubscribedEvents()
    {
        return array(
            PopInCampaignEvents::CREATE => array("create", 128),
            PopInCampaignEvents::UPDATE => array("update", 128),
            PopInCampaignEvents::DELETE => array("delete", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".pop_in_campaign_create" => array("beforeCreateFormBuild", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".pop_in_campaign_update" => array("beforeUpdateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".pop_in_campaign_create" => array("afterCreateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".pop_in_campaign_update" => array("afterUpdateFormBuild", 128),
        );
    }
}
